---
interface Props {
    src: string;
    minHeight: string;
}

const { src, minHeight = "200px" } = Astro.props;
import { Tabs, TabItem } from "@astrojs/starlight/components";

// Generate a stable, unique ID from the src prop to allow persistence
const id = `shadcn-preview-${src.replace(/[^a-zA-Z0-9-]/g, '_')}`.toLowerCase();

// Default prefix for flutter playground site on localmachine
// const defaultPrefix = "http://localhost:12345/"; 

// Default prefix for flutter playground site hosted by the author.
const defaultPrefix = "https://docs-improve-performance.shadcn-ui-playground.pages.dev/"; 

// Default prefix for flutter playground site hosted by the contributor (Harkirat Singh).
// const defaultPrefix = "https://flutter-shadcn-playground.web.app/" 
---

<Tabs>
    <TabItem label="Preview">
        <iframe
            id={id}
            class="preview"
            style={`min-height: ${minHeight}; width: 100%; border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 0.5rem; visibility: hidden;`}
            loading="lazy"
            data-astro-persist
        ></iframe>
    </TabItem>
    <TabItem label="Code">
        <slot />
    </TabItem>
</Tabs>

<script is:inline define:vars={{ defaultPrefix, id, src }}>
    const iframe = document.getElementById(id);

    // Make the iframe visible once it has loaded.
    // This listener only needs to be attached once.
    if (!iframe.dataset.loadListenerAttached) {
        iframe.addEventListener('load', () => {
            iframe.style.visibility = 'visible';
        });
        iframe.dataset.loadListenerAttached = 'true';
    }

    // Utility function to update query string parameters
    function updateQueryStringParameter(uri, key, value) {
        const re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        const separator = uri.includes("?") ? "&" : "?";
        if (uri.match(re)) {
            return uri.replace(re, `$1${key}=${value}$2`);
        } else {
            return `${uri}${separator}${key}=${value}`;
        }
    }

    // Function to build the complete iframe src with theme parameters
    function getIframeSrc() {
        const fullSrc = `${defaultPrefix}${src}`;
        const themeMode = document.documentElement.getAttribute("data-theme");
        const themeColor = document.documentElement.getAttribute("data-theme-color");
        let iframeSrc = fullSrc;

        if (themeMode) {
            iframeSrc = updateQueryStringParameter(iframeSrc, "theme", themeMode);
        }

        if (themeColor) {
            iframeSrc = updateQueryStringParameter(iframeSrc, "themeColor", themeColor);
        }
        return iframeSrc;
    }

    // Update the iframe src only if it has changed
    function updateIframe() {
        if (!iframe) return;
        const newSrc = getIframeSrc();

        // Check the decoded URI to handle encoded characters gracefully.
        if (decodeURI(iframe.src) !== decodeURI(newSrc)) {
            // Hide the iframe before changing the src to prevent flashing old content
            iframe.style.visibility = 'hidden';
            iframe.src = newSrc;
        } else {
            // If the src is already correct, ensure the iframe is visible.
            iframe.style.visibility = 'visible';
        }
    }

    // Initial update on page load
    updateIframe();

    // Set up a MutationObserver to watch for theme changes, but only once.
    if (!iframe.dataset.themeObserverAttached) {
        const observer = new MutationObserver(() => {
            updateIframe();
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["data-theme", "data-theme-color"],
        });
        iframe.dataset.themeObserverAttached = 'true';
    }
</script>
